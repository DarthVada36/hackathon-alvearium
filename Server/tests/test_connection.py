import os
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv
import socket
import dns.resolver

load_dotenv()

def test_dns_resolution(hostname):
    """Test if we can resolve the hostname"""
    try:
        ip = socket.gethostbyname(hostname)
        print(f"‚úì Resoluci√≥n DNS exitosa: {hostname} -> {ip}")
        return True
    except socket.gaierror as e:
        print(f"‚úó Error en la resoluci√≥n DNS para {hostname}: {e}")
        return False

def test_supabase_connection():
    """Test connection to Supabase PostgreSQL"""
    print("Probando conexi√≥n a Supabase PostgreSQL...")
    
    # Obtener variables de entorno
    password = os.getenv('YOUR_PASSWORD')
    database_url = os.getenv('DATABASE_URL')
    pooler_url = os.getenv('POOLER_URL')
    
    print(f"Contrase√±a cargada: {'S√≠' if password else 'No'}")
    print(f"DATABASE_URL cargada: {'S√≠' if database_url else 'No'}")
    print(f"POOLER_URL cargada: {'S√≠' if pooler_url else 'No'}")
    
    if not password:
        print("‚úó Error: YOUR_PASSWORD no est√° definida en el archivo .env")
        return False
    
    # Probar resoluci√≥n DNS primero
    direct_host = "db.ieeqygbbbipyiggqmyoz.supabase.co"
    pooler_host = "aws-1-eu-central-1.pooler.supabase.com"
    
    print(f"\n--- Probando resoluci√≥n DNS ---")
    direct_dns_ok = test_dns_resolution(direct_host)
    pooler_dns_ok = test_dns_resolution(pooler_host)
    
    # M√©todos alternativos de conexi√≥n
    connections_to_test = []
    
    # M√©todo 1: Conexi√≥n directa con par√°metros expl√≠citos
    connections_to_test.append({
        "name": "Conexi√≥n directa (par√°metros expl√≠citos)",
        "params": {
            "host": "db.ieeqygbbbipyiggqmyoz.supabase.co",
            "port": 5432,
            "database": "postgres",
            "user": "postgres",
            "password": password,
            "sslmode": "require"
        }
    })
    
    # M√©todo 2: Conexi√≥n con pooler con par√°metros expl√≠citos
    connections_to_test.append({
        "name": "Conexi√≥n con pooler (par√°metros expl√≠citos)",
        "params": {
            "host": "aws-1-eu-central-1.pooler.supabase.com",
            "port": 6543,
            "database": "postgres", 
            "user": "postgres.ieeqygbbbipyiggqmyoz",
            "password": password,
            "sslmode": "require"
        }
    })
    
    # M√©todo 3: Usando cadenas de conexi√≥n (si est√°n disponibles)
    if database_url:
        final_database_url = database_url.replace('[YOUR_PASSWORD]', password)
        connections_to_test.append({
            "name": "Conexi√≥n directa por URL",
            "url": final_database_url
        })
    
    if pooler_url:
        final_pooler_url = pooler_url.replace('[YOUR_PASSWORD]', password)
        connections_to_test.append({
            "name": "Conexi√≥n con pooler por URL", 
            "url": final_pooler_url
        })
    
    print(f"\n--- Probando conexiones a la base de datos ---")
    
    successful_connections = []
    
    for i, conn_config in enumerate(connections_to_test, 1):
        print(f"\n{i}. Probando {conn_config['name']}...")
        
        try:
            if 'url' in conn_config:
                # M√©todo con cadena de conexi√≥n
                print(f"URL: {conn_config['url'][:50]}...")
                connection = psycopg2.connect(
                    conn_config['url'],
                    cursor_factory=RealDictCursor,
                    connect_timeout=10
                )
            else:
                # M√©todo con par√°metros expl√≠citos
                print(f"Host: {conn_config['params']['host']}:{conn_config['params']['port']}")
                connection = psycopg2.connect(
                    cursor_factory=RealDictCursor,
                    connect_timeout=10,
                    **conn_config['params']
                )
            
            # Probar la conexi√≥n con una consulta simple
            with connection.cursor() as cursor:
                cursor.execute("SELECT version();")
                version = cursor.fetchone()
                print(f"‚úì ¬°Conexi√≥n exitosa!")
                print(f"  Versi√≥n de la base de datos: {version['version'][:50]}...")
                
                # Probar una consulta simple a una tabla
                cursor.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' LIMIT 5;")
                tables = cursor.fetchall()
                if tables:
                    print(f"  Se encontraron {len(tables)} tablas p√∫blicas")
                else:
                    print("  No se encontraron tablas p√∫blicas (esto es normal en bases de datos nuevas)")
            
            connection.close()
            successful_connections.append(conn_config['name'])
            
        except psycopg2.OperationalError as e:
            print(f"‚úó Fall√≥ la conexi√≥n: {e}")
        except Exception as e:
            print(f"‚úó Error inesperado: {e}")
    
    print(f"\n--- Resumen ---")
    if successful_connections:
        print(f"‚úì Conexiones exitosas: {len(successful_connections)}")
        for conn in successful_connections:
            print(f"  - {conn}")
        return True
    else:
        print("‚úó No hubo conexiones exitosas")
        print("\nSugerencias para solucionar problemas:")
        print("1. Verifica tu conexi√≥n a internet")
        print("2. Aseg√∫rate de que tu proyecto de Supabase est√© activo")
        print("3. Verifica si tu IP est√° permitida en la configuraci√≥n de Supabase")
        print("4. Verifica la contrase√±a en tu archivo .env")
        print("5. Intenta usar una VPN si est√°s detr√°s de un firewall restrictivo")
        return False

if __name__ == "__main__":
    success = test_supabase_connection()
    if success:
        print(f"\nüéâ ¬°La conexi√≥n a la base de datos funciona! Ya puedes usar tu aplicaci√≥n.")
    else:
        print(f"\n‚ùå Por favor, soluciona los problemas de conexi√≥n antes de continuar.")
