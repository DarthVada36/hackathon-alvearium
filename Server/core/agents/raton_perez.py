import logging
from typing import List, Dict, Any, Optional
import random
import re

logger = logging.getLogger(__name__)

class RatonPerezAgent:
    def __init__(self):
        self.context_length = 5  # Mantener solo las √∫ltimas 5 interacciones
        
        # Frases t√≠picas del Ratoncito P√©rez
        self.greetings = [
            "¬°Hola, peque√±o aventurero! üê≠",
            "¬°Qu√© alegr√≠a verte por aqu√≠! üê≠",
            "¬°Buenos d√≠as, explorador! üê≠",
            "¬°Hola! Soy el Ratoncito P√©rez üê≠"
        ]
        
        self.encouragements = [
            "¬°Qu√© emocionante!",
            "¬°Muy bien!",
            "¬°Excelente pregunta!",
            "¬°Me encanta tu curiosidad!"
        ]
        
        self.madrid_facts = [
            "¬øSab√≠as que Madrid tiene m√°s de 40 museos?",
            "El Parque del Retiro tiene m√°s de 15,000 √°rboles.",
            "La Puerta del Sol es el kil√≥metro 0 de Espa√±a.",
            "El Palacio Real tiene 3,418 habitaciones."
        ]
    
    def generate_response(self, message: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generar una respuesta contextual del Ratoncito P√©rez
        
        Args:
            message: Mensaje del usuario
            context: Contexto completo incluyendo familia, ubicaci√≥n, etc.
            
        Returns:
            Dict con response, suggestions, location_actions y points_awarded
        """
        try:
            # Extraer informaci√≥n del contexto
            family_members = context.get('family_members', [])
            current_location = context.get('current_location')
            active_route = context.get('active_route')
            conversation_history = context.get('conversation_history', [])
            preferred_language = context.get('preferred_language', 'es')
            
            # Personalizar seg√∫n miembros de la familia
            has_children = any(member.get('member_type') == 'child' for member in family_members)
            children_ages = [member.get('age', 0) for member in family_members if member.get('member_type') == 'child']
            
            # Analizar el mensaje del usuario
            message_lower = message.lower()
            
            # Generar respuesta base
            response = self._generate_contextual_response(
                message, message_lower, has_children, children_ages,
                active_route, current_location
            )
            
            # Generar sugerencias
            suggestions = self._generate_suggestions(
                message_lower, active_route, has_children
            )
            
            # Determinar acciones de ubicaci√≥n
            location_actions = self._determine_location_actions(
                current_location, active_route, message_lower
            )
            
            # Calcular puntos a otorgar
            points_awarded = self._calculate_points(
                message_lower, active_route, current_location
            )
            
            return {
                "response": response,
                "suggestions": suggestions,
                "location_actions": location_actions,
                "points_awarded": points_awarded
            }
            
        except Exception as e:
            logger.error(f"Error generando respuesta del agente: {e}")
            return {
                "response": "¬°Hola! Soy el Ratoncito P√©rez. Estoy teniendo algunos problemitas t√©cnicos ahora mismo. ¬øPuedes intentarlo de nuevo en un momentito?",
                "suggestions": ["Intentar de nuevo", "Pedir ayuda"],
                "location_actions": None,
                "points_awarded": 0
            }
    
    def _generate_contextual_response(
        self, 
        message: str, 
        message_lower: str, 
        has_children: bool,
        children_ages: List[int],
        active_route: Optional[Dict],
        current_location: Optional[Dict]
    ) -> str:
        """Generar respuesta contextual basada en el mensaje y situaci√≥n"""
        
        # Respuestas para saludos
        if any(greeting in message_lower for greeting in ['hola', 'buenos d√≠as', 'buenas tardes', 'hi', 'hello']):
            greeting = random.choice(self.greetings)
            if active_route:
                return f"{greeting} Veo que est√°s en la ruta '{active_route.get('route_name', 'aventura')}'. ¬øC√≥mo va todo?"
            else:
                return f"{greeting} ¬øListo para una nueva aventura por Madrid?"
        
        # Preguntas sobre Madrid
        if any(word in message_lower for word in ['madrid', 'ciudad', 'historia', 'museo', 'parque']):
            fact = random.choice(self.madrid_facts)
            return f"¬°Me encanta que preguntes sobre Madrid! {fact} ¬øTe gustar√≠a saber m√°s sobre alg√∫n lugar en particular?"
        
        # Preguntas sobre el Ratoncito P√©rez
        if any(word in message_lower for word in ['ratoncito p√©rez', 'rat√≥n', 'diente', 'dientes']):
            return "¬°Soy el Ratoncito P√©rez! Pero aqu√≠ en Madrid no solo recojo dientes, tambi√©n ayudo a las familias a descubrir los lugares m√°s m√°gicos de la ciudad. ¬øSab√≠as que tengo una casa en la Calle Arenal?"
        
        # Preguntas sobre ubicaci√≥n/navegaci√≥n
        if any(word in message_lower for word in ['d√≥nde', 'c√≥mo llegar', 'direcci√≥n', 'perdido']):
            if current_location and active_route:
                return "Veo tu ubicaci√≥n actual. Te ayudo a seguir la ruta. ¬øNecesitas direcciones espec√≠ficas para llegar al pr√≥ximo punto?"
            else:
                return "Para ayudarte mejor con direcciones, necesito que actives tu ubicaci√≥n. ¬øPuedes compartirla conmigo?"
        
        # Preguntas sobre puntos/juego
        if any(word in message_lower for word in ['puntos', 'juego', 'premio', 'recompensa']):
            if active_route:
                points = active_route.get('points_earned', 0)
                return f"¬°Has ganado {points} puntos en esta aventura! Puedes ganar m√°s visitando lugares especiales y completando desaf√≠os. ¬øQuieres intentar una actividad?"
            else:
                return "¬°Los puntos son muy divertidos! Cuando inicies una ruta, podr√°s ganar puntos visitando lugares y completando actividades. ¬øComenzamos una aventura?"
        
        # Despedidas
        if any(word in message_lower for word in ['adi√≥s', 'bye', 'hasta luego', 'nos vemos']):
            return "¬°Hasta la pr√≥xima aventura! Recuerda que siempre puedes contar conmigo para explorar Madrid. ¬°Que tengas un d√≠a m√°gico!"
        
        # Respuesta general amigable
        encouragement = random.choice(self.encouragements)
        base_responses = [
            "¬°Qu√© interesante! Cu√©ntame m√°s sobre lo que te gustar√≠a hacer en Madrid.",
            "Madrid est√° lleno de sorpresas. ¬øTe gustar√≠a que te recomiende algunos lugares especiales?",
            "Como buen ratoncito explorador, conozco muchos rincones m√°gicos de Madrid. ¬øQu√© tipo de aventura buscas?"
        ]
        
        return f"{encouragement} {random.choice(base_responses)}"
    
    def _generate_suggestions(
        self, 
        message_lower: str, 
        active_route: Optional[Dict], 
        has_children: bool
    ) -> List[str]:
        """Generar sugerencias de seguimiento"""
        
        suggestions = []
        
        if active_route:
            suggestions.extend([
                "¬øC√≥mo sigo la ruta?",
                "Mostrar puntos cercanos",
                "¬øCu√°ntos puntos llevo?"
            ])
        else:
            suggestions.extend([
                "Comenzar una nueva ruta",
                "¬øQu√© puedo visitar en Madrid?",
                "Lugares para ni√±os"
            ])
        
        # Sugerencias espec√≠ficas seg√∫n el mensaje
        if "museo" in message_lower:
            suggestions.append("Museos recomendados")
        elif "parque" in message_lower:
            suggestions.append("Parques para visitar")
        elif "comida" in message_lower or "comer" in message_lower:
            suggestions.append("Lugares para comer")
        
        if has_children:
            suggestions.append("Actividades para ni√±os")
        
        return suggestions[:4]  # Limitar a 4 sugerencias
    
    def _determine_location_actions(
        self, 
        current_location: Optional[Dict], 
        active_route: Optional[Dict], 
        message_lower: str
    ) -> Optional[Dict[str, Any]]:
        """Determinar acciones relacionadas con la ubicaci√≥n"""
        
        if not current_location:
            return None
        
        actions = {}
        
        # Si hay una ruta activa, verificar progreso
        if active_route:
            actions["check_proximity"] = True
            actions["route_guidance"] = True
        
        # Si pide direcciones
        if any(word in message_lower for word in ['c√≥mo llegar', 'direcciones', 'navegar']):
            actions["provide_directions"] = True
        
        # Si menciona estar perdido
        if any(word in message_lower for word in ['perdido', 'no s√© d√≥nde', 'ayuda ubicaci√≥n']):
            actions["emergency_help"] = True
            actions["nearby_landmarks"] = True
        
        return actions if actions else None
    
    def _calculate_points(
        self, 
        message_lower: str, 
        active_route: Optional[Dict], 
        current_location: Optional[Dict]
    ) -> int:
        """Calcular puntos a otorgar por la interacci√≥n"""
        
        points = 0
        
        # Puntos por primera interacci√≥n del d√≠a
        # (En implementaci√≥n real, verificar con timestamp)
        if any(greeting in message_lower for greeting in ['hola', 'buenos d√≠as']):
            points += 5
        
        # Puntos por hacer preguntas educativas
        if any(word in message_lower for word in ['historia', 'museo', 'cultura', 'arte']):
            points += 10
        
        # Puntos por compartir ubicaci√≥n
        if current_location and active_route:
            points += 3
        
        # Puntos por completar interacciones espec√≠ficas
        if "ratoncito p√©rez" in message_lower:
            points += 8
        
        return points